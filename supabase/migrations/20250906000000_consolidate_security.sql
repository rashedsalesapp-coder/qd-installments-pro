-- This migration consolidates and fixes all security-related issues.

-- Step 1: Drop all existing RLS policies to ensure a clean slate.
-- We use DO blocks to prevent errors if a policy doesn't exist.

DO $$ BEGIN
  DROP POLICY IF EXISTS "Enable read access for authenticated users" ON public.customers;
  DROP POLICY IF EXISTS "Enable write access for authenticated users" ON public.customers;
  DROP POLICY IF EXISTS "Enable update for authenticated users" ON public.customers;
  DROP POLICY IF EXISTS "Enable delete for authenticated users" ON public.customers;
  DROP POLICY IF EXISTS "Allow all access to authenticated users" ON public.customers;
  DROP POLICY IF EXISTS "Authorized users can view customers" ON public.customers;
  DROP POLICY IF EXISTS "Authorized users can insert customers" ON public.customers;
  DROP POLICY IF EXISTS "Authorized users can update customers" ON public.customers;
  DROP POLICY IF EXISTS "Authorized users can delete customers" ON public.customers;
  DROP POLICY IF EXISTS "Authenticated users can view customers" ON public.customers;
  DROP POLICY IF EXISTS "Authenticated users can create customers" ON public.customers;
  DROP POLICY IF EXISTS "Authenticated users can update customers" ON public.customers;
  DROP POLICY IF EXISTS "Authenticated users can delete customers" ON public.customers;
END $$;

DO $$ BEGIN
  DROP POLICY IF EXISTS "Enable read access for authenticated users" ON public.transactions;
  DROP POLICY IF EXISTS "Enable write access for authenticated users" ON public.transactions;
  DROP POLICY IF EXISTS "Enable update for authenticated users" ON public.transactions;
  DROP POLICY IF EXISTS "Enable delete for authenticated users" ON public.transactions;
  DROP POLICY IF EXISTS "Authenticated users can view transactions" ON public.transactions;
  DROP POLICY IF EXISTS "Authenticated users can create transactions" ON public.transactions;
  DROP POLICY IF EXISTS "Authenticated users can update transactions" ON public.transactions;
  DROP POLICY IF EXISTS "Authenticated users can delete transactions" ON public.transactions;
END $$;

DO $$ BEGIN
  DROP POLICY IF EXISTS "Enable read access for authenticated users" ON public.payments;
  DROP POLICY IF EXISTS "Enable write access for authenticated users" ON public.payments;
  DROP POLICY IF EXISTS "Enable update for authenticated users" ON public.payments;
  DROP POLICY IF EXISTS "Enable delete for authenticated users" ON public.payments;
  DROP POLICY IF EXISTS "Authenticated users can view payments" ON public.payments;
  DROP POLICY IF EXISTS "Authenticated users can create payments" ON public.payments;
  DROP POLICY IF EXISTS "Authenticated users can update payments" ON public.payments;
END $$;

DO $$ BEGIN
  DROP POLICY IF EXISTS "Enable read access for all users" ON public.audit_log;
  DROP POLICY IF EXISTS "Enable insert for authenticated users" ON public.audit_log;
  DROP POLICY IF EXISTS "Admins can do anything" ON public.audit_log;
END $$;

-- Step 2: Create the audit_log table if it doesn't exist.
CREATE TABLE IF NOT EXISTS public.audit_log (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID REFERENCES auth.users(id),
    action TEXT NOT NULL,
    details JSONB,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- Enable RLS on the audit_log table.
ALTER TABLE public.audit_log ENABLE ROW LEVEL SECURITY;

-- Step 3: Re-establish and apply role-based RLS policies.

-- The is_authorized_user function should exist from a previous migration,
-- but we'll create it here if it doesn't, to make this migration self-contained.
CREATE OR REPLACE FUNCTION public.is_authorized_user(_user_id UUID)
RETURNS BOOLEAN
LANGUAGE SQL
STABLE
SECURITY DEFINER
SET search_path = public
AS $$
  SELECT EXISTS (
    SELECT 1
    FROM public.user_roles
    WHERE user_id = _user_id
      AND role IN ('admin', 'staff')
  )
$$;

-- Step 4: Fix "Function Search Path Mutable" warning for all functions.
-- We are also re-creating the functions from other migrations here to ensure they are secure.

CREATE OR REPLACE FUNCTION public.has_role(_user_id UUID, _role app_role)
RETURNS BOOLEAN
LANGUAGE SQL
STABLE
SECURITY DEFINER
SET search_path = public
AS $$
  SELECT EXISTS (
    SELECT 1
    FROM public.user_roles
    WHERE user_id = _user_id
      AND role = _role
  )
$$;

CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
BEGIN
  -- Assign admin role to first user, staff role to subsequent users
  IF (SELECT COUNT(*) FROM public.user_roles) = 0 THEN
    INSERT INTO public.user_roles (user_id, role)
    VALUES (NEW.id, 'admin');
  ELSE
    INSERT INTO public.user_roles (user_id, role)
    VALUES (NEW.id, 'staff');
  END IF;
  RETURN NEW;
END;
$$;

CREATE OR REPLACE FUNCTION public.generate_transaction_sequence()
RETURNS TEXT
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
    next_val INTEGER;
    formatted_val TEXT;
BEGIN
    -- Get the current max numeric value from sequence_number
    SELECT COALESCE(MAX(NULLIF(REGEXP_REPLACE(sequence_number, '[^0-9]', '', 'g'), '')::INTEGER), 0) + 1
    INTO next_val
    FROM transactions;

    -- Format as 4 digits with leading zeros
    formatted_val := LPAD(next_val::TEXT, 4, '0');

    RETURN formatted_val;
END;
$$;

CREATE OR REPLACE FUNCTION public.set_transaction_sequence_number()
RETURNS TRIGGER
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
BEGIN
    IF NEW.sequence_number IS NULL THEN
        NEW.sequence_number := generate_transaction_sequence();
    END IF;
    RETURN NEW;
END;
$$;

CREATE OR REPLACE FUNCTION public.generate_customer_sequence()
RETURNS TEXT
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
    next_val INTEGER;
    formatted_val TEXT;
BEGIN
    -- Get the current max numeric value from sequence_number
    SELECT COALESCE(MAX(NULLIF(REGEXP_REPLACE(sequence_number, '[^0-9]', '', 'g'), '')::INTEGER), 0) + 1
    INTO next_val
    FROM customers;

    -- Format as 4 digits with leading zeros
    formatted_val := LPAD(next_val::TEXT, 4, '0');

    RETURN formatted_val;
END;
$$;

CREATE OR REPLACE FUNCTION public.set_customer_sequence_number()
RETURNS TRIGGER
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
BEGIN
    IF NEW.sequence_number IS NULL THEN
        NEW.sequence_number := generate_customer_sequence();
    END IF;
    RETURN NEW;
END;
$$;

CREATE OR REPLACE FUNCTION public.string_to_uuid(input_str text)
RETURNS uuid
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
    namespace uuid := '6ba7b810-9dad-11d1-80b4-00c04fd430c8';  -- A fixed namespace UUID
    result uuid;
BEGIN
    -- Use MD5 to create a deterministic UUID from the input string and namespace
    SELECT uuid_generate_v5(namespace, input_str) INTO result;
    RETURN result;
END;
$$;

-- Secure RLS policies for the 'customers' table.
CREATE POLICY "Authorized users can manage customers"
ON public.customers
FOR ALL
TO authenticated
USING (public.is_authorized_user(auth.uid()))
WITH CHECK (public.is_authorized_user(auth.uid()));

-- Secure RLS policies for the 'transactions' table.
CREATE POLICY "Authorized users can manage transactions"
ON public.transactions
FOR ALL
TO authenticated
USING (public.is_authorized_user(auth.uid()))
WITH CHECK (public.is_authorized_user(auth.uid()));

-- Secure RLS policies for the 'payments' table.
CREATE POLICY "Authorized users can manage payments"
ON public.payments
FOR ALL
TO authenticated
USING (public.is_authorized_user(auth.uid()))
WITH CHECK (public.is_authorized_user(auth.uid()));

-- Secure RLS policies for the 'audit_log' table.
CREATE POLICY "Authenticated users can insert into audit_log"
ON public.audit_log
FOR INSERT
TO authenticated
WITH CHECK (true);

CREATE POLICY "Admins can view audit_log"
ON public.audit_log
FOR SELECT
TO authenticated
USING (public.has_role(auth.uid(), 'admin'));
